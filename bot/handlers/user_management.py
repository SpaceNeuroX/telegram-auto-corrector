from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Contact
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from telethon import TelegramClient
import re

from bot.keyboards.keyboards import (
    get_phone_request_keyboard,
    get_cancel_keyboard,
    get_main_menu,
    get_userbot_menu,
    get_confirmation_keyboard,
    get_code_input_keyboard,
    get_code_display_text,
)
from bot.database.database import UserBotDatabase, UserDatabase
from bot.services.userbot_service import UserBotService

router = Router()


class UserBotConnection(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()
    waiting_for_password = State()


temp_clients = {}
userbot_service = UserBotService()


@router.callback_query(F.data == "connect_userbot")
async def connect_userbot_handler(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è user-–±–æ—Ç–∞"""
    user_id = callback.from_user.id

    existing_bot = await UserBotDatabase.get_user_bot(user_id)
    if existing_bot:
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π user-–±–æ—Ç!\n\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–æ–≤—ã–π, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
            reply_markup=get_main_menu(),
            parse_mode="HTML",
        )
        return

    await callback.message.edit_text(
        "üì± <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ user-–±–æ—Ç–∞</b>\n\n"
        "–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram.\n\n"
        "<b>üîí –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ:</b>\n"
        "‚Ä¢ <i>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API Telegram</i>\n"
        "‚Ä¢ <i>–î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ —É –≤–∞—Å</i>\n"
        "‚Ä¢ <i>–ú–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç</i>\n\n"
        "<u>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:</u>",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML",
    )

    await callback.message.answer(
        "üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=get_phone_request_keyboard(),
        parse_mode="HTML",
    )

    await state.set_state(UserBotConnection.waiting_for_phone)


@router.message(UserBotConnection.waiting_for_phone, F.contact)
async def phone_received_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone_number = message.contact.phone_number
    user_id = message.from_user.id

    await message.answer("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...", reply_markup=None)

    result = await userbot_service.create_session(phone_number)

    if result["success"]:

        temp_clients[user_id] = {
            "client": result["client"],
            "phone_number": phone_number,
        }

        await message.answer(
            f"üì≤ <b>–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
            f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä:\n"
            f"<code>{phone_number}</code>\n\n"
            f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞.\n"
            f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–¥ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
            f"{get_code_display_text('')}",
            reply_markup=get_code_input_keyboard(),
        )

        await state.update_data(current_code="")
        await state.set_state(UserBotConnection.waiting_for_code)
    else:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {result['message']}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_main_menu(),
        )
        await state.clear()


@router.message(UserBotConnection.waiting_for_phone, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_phone_handler(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await state.clear()
    await message.answer("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())


@router.message(UserBotConnection.waiting_for_phone)
async def invalid_phone_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        reply_markup=get_phone_request_keyboard(),
    )


@router.callback_query(F.data.startswith("code_digit_"))
async def code_digit_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ü–∏—Ñ—Ä—É"""
    data = await state.get_data()
    current_code = data.get("current_code", "")

    if len(current_code) >= 5:
        await callback.answer("–ö–æ–¥ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 5 —Ü–∏—Ñ—Ä!", show_alert=True)
        return

    digit = callback.data.split("_")[-1]
    new_code = current_code + digit

    await state.update_data(current_code=new_code)

    await callback.message.edit_text(
        f"üì≤ <b>–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
        f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä.\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞.\n"
        f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–¥ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
        f"{get_code_display_text(new_code)}",
        reply_markup=get_code_input_keyboard(),
    )

    await callback.answer()


@router.callback_query(F.data == "code_backspace")
async def code_backspace_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä—ã"""
    data = await state.get_data()
    current_code = data.get("current_code", "")

    if len(current_code) == 0:
        await callback.answer("–ö–æ–¥ —É–∂–µ –ø—É—Å—Ç–æ–π!", show_alert=True)
        return

    new_code = current_code[:-1]
    await state.update_data(current_code=new_code)

    await callback.message.edit_text(
        f"üì≤ <b>–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
        f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä.\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞.\n"
        f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–¥ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
        f"{get_code_display_text(new_code)}",
        reply_markup=get_code_input_keyboard(),
    )

    await callback.answer()


@router.callback_query(F.data == "code_submit")
async def code_submit_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞"""
    data = await state.get_data()
    current_code = data.get("current_code", "")
    user_id = callback.from_user.id

    if len(current_code) != 5:
        await callback.answer("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 5 —Ü–∏—Ñ—Ä!", show_alert=True)
        return

    if user_id not in temp_clients:
        await callback.message.edit_text(
            "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_menu(),
        )
        await state.clear()
        return

    client_data = temp_clients[user_id]
    client = client_data["client"]
    phone_number = client_data["phone_number"]

    await callback.message.edit_text(
        "‚è≥ <b>–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥...</b>", parse_mode="HTML"
    )

    result = await userbot_service.verify_code(client, phone_number, current_code)

    if result["success"]:

        session_string = result["session_string"]
        success = await UserBotDatabase.add_user_bot(
            user_id, phone_number, session_string
        )

        if success:
            await callback.message.edit_text(
                "‚úÖ <b>User-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ <i>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã</i>\n"
                "‚Ä¢ <i>–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—é</i>\n"
                "‚Ä¢ <i>–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏</i>\n\n"
                "<u>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.</u>",
                reply_markup=get_main_menu(),
                parse_mode="HTML",
            )
        else:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_menu(),
                parse_mode="HTML",
            )

        if user_id in temp_clients:
            await temp_clients[user_id]["client"].disconnect()
            del temp_clients[user_id]

        await state.clear()

    elif result.get("needs_password"):
        await callback.message.edit_text(
            "üîê <b>–¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –ø–∞—Ä–æ–ª—å</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        await state.set_state(UserBotConnection.waiting_for_password)
    else:
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {result['message']}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.\n\n"
            f"{get_code_display_text('')}",
            reply_markup=get_code_input_keyboard(),
        )

        await state.update_data(current_code="")


@router.message(UserBotConnection.waiting_for_code)
async def invalid_code_text_handler(message: Message):
    """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–ø–æ—Å–æ–±–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞"""
    await message.answer(
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
        "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–¥ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n"
        "Telegram –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–æ–∑–≤–∞—Ç—å –∫–æ–¥.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞.",
        reply_markup=get_cancel_keyboard(),
    )


@router.message(UserBotConnection.waiting_for_password)
async def password_received_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 2FA –ø–∞—Ä–æ–ª—è"""
    password = message.text
    user_id = message.from_user.id

    if user_id not in temp_clients:
        await message.answer(
            "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_menu(),
        )
        await state.clear()
        return

    client_data = temp_clients[user_id]
    client = client_data["client"]
    phone_number = client_data["phone_number"]

    await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å...")

    result = await userbot_service.verify_password(client, password)

    if result["success"]:

        session_string = result["session_string"]
        success = await UserBotDatabase.add_user_bot(
            user_id, phone_number, session_string
        )

        if success:
            await message.answer(
                "‚úÖ <b>User-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã\n"
                "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—é\n"
                "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.",
                reply_markup=get_main_menu(),
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_menu(),
            )

        if user_id in temp_clients:
            await temp_clients[user_id]["client"].disconnect()
            del temp_clients[user_id]

        await state.clear()
    else:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {result['message']}\n\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_cancel_keyboard(),
        )


@router.callback_query(F.data == "start_userbot")
async def start_userbot_handler(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫ user-–±–æ—Ç–∞"""
    user_id = callback.from_user.id

    bot_data = await UserBotDatabase.get_user_bot(user_id)
    if not bot_data:
        await callback.message.edit_text(
            "‚ùå <b>User-–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n\n–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=get_main_menu(),
            parse_mode="HTML",
        )
        return

    await callback.message.edit_text(
        "‚è≥ <b>–ó–∞–ø—É—Å–∫–∞–µ–º user-–±–æ—Ç–∞...</b>", parse_mode="HTML"
    )

    success = await userbot_service.start_user_bot(user_id, bot_data["session_string"])

    if success:
        await callback.message.edit_text(
            "‚úÖ <b>User-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.\n\n"
            "<u>–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.</u>",
            reply_markup=get_userbot_menu(True, True),
            parse_mode="HTML",
        )
    else:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ user-–±–æ—Ç–∞.</b>\n\n"
            "<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
            "‚Ä¢ <i>–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é</i>\n"
            "‚Ä¢ <i>–ò—Å—Ç–µ–∫—à–∞—è —Å–µ—Å—Å–∏—è</i>\n"
            "‚Ä¢ <i>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</i>\n\n"
            "<u>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ –±–æ—Ç–∞.</u>",
            reply_markup=get_userbot_menu(True, False),
            parse_mode="HTML",
        )


@router.callback_query(F.data == "stop_userbot")
async def stop_userbot_handler(callback: CallbackQuery):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ user-–±–æ—Ç–∞"""
    user_id = callback.from_user.id

    await callback.message.edit_text("‚è≥ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user-–±–æ—Ç–∞...")

    success = await userbot_service.stop_user_bot(user_id)

    if success:
        await callback.message.edit_text(
            "‚è∏Ô∏è <b>User-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            "–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_userbot_menu(True, False),
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ user-–±–æ—Ç–∞", reply_markup=get_userbot_menu(True, True)
        )


@router.callback_query(F.data == "disconnect_userbot")
async def disconnect_userbot_handler(callback: CallbackQuery):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ user-–±–æ—Ç–∞"""
    user_id = callback.from_user.id

    await callback.message.edit_text(
        "‚ö†Ô∏è <b>–û—Ç–∫–ª—é—á–µ–Ω–∏–µ user-–±–æ—Ç–∞</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∏—Ç—å user-–±–æ—Ç–∞?\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.",
        reply_markup=get_confirmation_keyboard("disconnect"),
    )


@router.callback_query(F.data == "confirm_disconnect")
async def confirm_disconnect_handler(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è user-–±–æ—Ç–∞"""
    user_id = callback.from_user.id

    await userbot_service.stop_user_bot(user_id)

    success = await UserBotDatabase.deactivate_user_bot(user_id)

    if success:
        await callback.message.edit_text(
            "‚úÖ <b>User-–±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω</b>\n\n"
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_main_menu(),
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è user-–±–æ—Ç–∞", reply_markup=get_userbot_menu(True, False)
        )
