from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.keyboards.keyboards import (
    get_settings_menu,
    get_userbot_menu,
    get_correction_settings_menu,
    get_main_menu,
    get_cancel_keyboard,
)
from bot.database.database import UserSettingsDatabase, UserBotDatabase
from bot.handlers.user_management import userbot_service

router = Router()


class SettingsStates(StatesGroup):
    waiting_for_min_length = State()


@router.callback_query(F.data == "settings")
async def settings_handler(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await show_settings_menu(callback.message, is_callback=True)


async def show_settings_menu(message_or_callback, is_callback=False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    settings_text = """
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:
‚Ä¢ <i>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</i>
‚Ä¢ <i>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ user-–±–æ—Ç–æ–º</i>
"""

    if is_callback:
        await message_or_callback.edit_text(
            settings_text, reply_markup=get_settings_menu(), parse_mode="HTML"
        )
    else:
        await message_or_callback.answer(
            settings_text, reply_markup=get_settings_menu(), parse_mode="HTML"
        )


@router.callback_query(F.data == "correction_settings")
async def correction_settings_handler(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏"""
    user_id = callback.from_user.id

    settings = await UserSettingsDatabase.get_settings(user_id)
    min_length = settings.get("min_message_length", 10)

    settings_text = f"""
üìù <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏</b>

<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:</b> <code>{min_length}</code> —Å–∏–º–≤–æ–ª–æ–≤
<i>–°–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–æ—á–µ —ç—Ç–æ–π –¥–ª–∏–Ω—ã –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è</i>

üí° <u>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</u> 10-20 —Å–∏–º–≤–æ–ª–æ–≤
"""

    await callback.message.edit_text(
        settings_text, reply_markup=get_correction_settings_menu(), parse_mode="HTML"
    )


@router.callback_query(F.data == "set_min_length")
async def set_min_length_handler(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "üìè <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–∏–º–≤–æ–ª–∞—Ö <i>(–æ—Ç 5 –¥–æ 100)</i>:\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>15</code>",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML",
    )

    await state.set_state(SettingsStates.waiting_for_min_length)


@router.message(SettingsStates.waiting_for_min_length, F.text.regexp(r"^\d+$"))
async def min_length_received_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã"""
    length = int(message.text)
    user_id = message.from_user.id

    if length < 5 or length > 100:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            "–î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç <code>5</code> –¥–æ <code>100</code> —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard(),
            parse_mode="HTML",
        )
        return

    success = await UserSettingsDatabase.update_setting(
        user_id, "min_message_length", length
    )

    if success:
        await message.answer(
            f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <code>{length}</code> —Å–∏–º–≤–æ–ª–æ–≤",
            reply_markup=get_main_menu(),
            parse_mode="HTML",
        )
    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>",
            reply_markup=get_main_menu(),
            parse_mode="HTML",
        )

    await state.clear()


@router.message(SettingsStates.waiting_for_min_length)
async def invalid_min_length_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª–∏–Ω—ã"""
    await message.answer(
        "<blockquote>‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç <code>5</code> –¥–æ <code>100</code></blockquote>",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML",
    )


@router.callback_query(F.data == "userbot_settings")
async def userbot_settings_handler(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è user-–±–æ—Ç–æ–º"""
    user_id = callback.from_user.id

    bot_data = await UserBotDatabase.get_user_bot(user_id)
    is_connected = bot_data is not None
    is_active = userbot_service.is_bot_active(user_id) if is_connected else False

    if is_connected:
        phone = bot_data["phone_number"]
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        settings_text = f"""
<blockquote expandable>
ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ user-–±–æ—Ç–æ–º</b>

<b>–°—Ç–∞—Ç—É—Å:</b> {status}
<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <code>{phone}</code>
<b>–î–∞—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> <i>{bot_data['created_at'].split(' ')[0]}</i>

<u>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</u>
</blockquote>
"""
    else:
        settings_text = """
<blockquote expandable>
ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ user-–±–æ—Ç–æ–º</b>

<b>–°—Ç–∞—Ç—É—Å:</b> üî¥ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω

–î–ª—è —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å user-–±–æ—Ç–∞.
<i>–≠—Ç–æ –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç Telegram</i>, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 
–∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
</blockquote>
"""

    await callback.message.edit_text(
        settings_text,
        reply_markup=get_userbot_menu(is_connected, is_active),
        parse_mode="HTML",
    )
